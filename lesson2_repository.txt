Q What happens when you initialize a repository? Why do you need to do it?
-> when we initialize a repository it creates .git file in it,we need to add command git init to make it a git repositiory
    because all the git commands work on git repositoried not in normal repository.
    
Q How is the staging area different from the working directory and the repository?What value do you think it offers?
-> in staging area we put those file together of whose we want to get a single commit if they have same logic,whereas in working
   repository all the files are get commited to store them there for future reference.it offers us to commit the same logica change 
   comes under same commit though they are two different file. 
   
   
Q How can you use the staging area to make sure you have one commit per logical
   change?
->by the use of stagging area we cn git add the number of files that shares the commomn login among them and then,
  commit them togeter with a single commit having what it do. 


Q  What are some situations when branches would be helpful in keeping your history
    organized? How would branches help?
-> branches are useful when you want to do some experiment on your current project but didnt want to aplly the changes into the
    master branch so we create the side branch to test the new feature by checking out which has the same code as the previously 
	on master branch.
	
Q  How do the diagrams help you visualize the branch structure?
-> through the diagram we can easily understand the branch structure,like where we were when we change to the new branch ,how many features are same and likewise
    we can understand the different branches.

Q What is the result of merging two branches together? Why do we represent it in
   the diagram the way we do?
-> When merging the two files one can use the features created in another one though both of them contain the differently 
    separately from each other.by showing the merging of the branches in the diagram we can actually find the different 
    commits as make it clear whose parent was whom.
   
Q What are the pros and cons of Git's automatic merging vs. always doing merges
   manually?
-> pros:
   1)through git automatic merging  we dont need to compare every change in it merge in a way through which both of the features of the file 
      can be used .
	2)if conflict occurs we can resolve the conflict and save them for further use   .
   cons:
   1)it sometimes merge the way we  don't wanted,or it doent work like the way we change it .
   2)it sometimes get complicated to understnd what the other has done in order to merge it with our file version  .